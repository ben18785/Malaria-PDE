function [t,Y] = f_derivative_ODEPDESystem_vv(t,Y,v_parameters,v_areaBreed,v_areaFeed,N)
% A function which returns the derivative of the various components of both
% the ODEs (Jx,Jy,My,Ox) and PDEs (Hx,Ox)

v_Jx = Y(1:N,1); v_Jy = Y(N+1:2*N,1); v_My = Y(2*N+1:3*N,1); v_Ux = Y(3*N+1:4*N,1); v_Hx = Y(4*N+1:5*N,1);
v_Ox = Y(5*N+1:end,1);

c_breedVariance = v_parameters(1);
c_feedVariance = v_parameters(2);
c_pa_thetaB = v_parameters(3);
c_pa_thetaA = v_parameters(4);
c_S0 = v_parameters(5);
c_SH = v_parameters(6);
c_SM = v_parameters(7);
c_omega = v_parameters(8);
c_kappa = v_parameters(9);
c_O = v_parameters(10);
c_H = v_parameters(11);
c_nu = v_parameters(12);
c_gamma_j = v_parameters(13);
c_mu_j = v_parameters(14);
c_alpha = v_parameters(15);
c_mu_m = v_parameters(16);
c_mu_u = v_parameters(17);
c_m = v_parameters(18);
c_mu_h = v_parameters(19);
c_gamma_h = v_parameters(20);
c_mu_o = v_parameters(21);

% First of all get the derivatives for the ODE variables
dJxdt = v_areaBreed.*(0.5*c_kappa*c_nu*v_Ox - c_gamma_j*v_Jx - c_mu_j*v_Jx - c_alpha*v_Jx.*(v_Jx + v_Jy));
dJydt = v_areaBreed.*(0.5*c_kappa*c_nu*v_Ox - c_gamma_j*v_